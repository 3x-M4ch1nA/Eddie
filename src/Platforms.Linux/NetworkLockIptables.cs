// <eddie_source_header>
// This file is part of Eddie/AirVPN software.
// Copyright (C)2014-2016 AirVPN (support@airvpn.org) / https://airvpn.org
//
// Eddie is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Eddie is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Eddie. If not, see <http://www.gnu.org/licenses/>.
// </eddie_source_header>

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using Eddie.Core;

namespace Eddie.Platforms
{
	public class NetworkLockIptables : NetworkLockPlugin
	{
		private IpAddresses m_currentList = new IpAddresses();

		public override string GetCode()
		{
			return "linux_iptables";
		}

		public override string GetName()
		{
			return "Linux IPTables";
		}

		public override bool GetSupport()
		{
			if (SystemShell.ShellCmd("iptables --version").IndexOf("iptables v") != 0)
				return false;

			if (SystemShell.ShellCmd("iptables-save").IndexOf("# Generated by iptables-save v") != 0)
				return false;

			return true;
		}

		public string GetBackupPath(string ipVersion)
		{
			if (ipVersion == "4") // For compatibility with Eddie<2.9
				ipVersion = "";
			return Storage.DataPath + Platform.Instance.DirSep + "ip" + ipVersion + "tables.dat";
		}

		public override void Activation()
		{
			base.Activation();

			string rulesBackupSessionV4 = GetBackupPath("4");
            string rulesBackupSessionV6 = GetBackupPath("6");

            if( (Platform.Instance.FileExists(rulesBackupSessionV4)) || (Platform.Instance.FileExists(rulesBackupSessionV6)) )
            {
				Engine.Instance.Logs.Log(LogType.Warning, Messages.NetworkLockLinuxUnexpectedAlreadyActive);
				Deactivation();
			}

			// Backup V4
			SystemShell.ShellCmd("iptables-save >\"" + SystemShell.EscapePath(rulesBackupSessionV4) + "\"");

			// Backup V6
			SystemShell.ShellCmd("ip6tables-save >\"" + SystemShell.EscapePath(rulesBackupSessionV6) + "\"");

			// Flush V4
			SystemShell.ShellCmd("iptables -P INPUT ACCEPT");
			SystemShell.ShellCmd("iptables -P FORWARD ACCEPT");
			SystemShell.ShellCmd("iptables -P OUTPUT ACCEPT");
			SystemShell.ShellCmd("iptables -t nat -F");
			SystemShell.ShellCmd("iptables -t mangle -F");
			SystemShell.ShellCmd("iptables -F");
			SystemShell.ShellCmd("iptables -X");

			// Flush V6
			SystemShell.ShellCmd("ip6tables -P INPUT ACCEPT");
			SystemShell.ShellCmd("ip6tables -P FORWARD ACCEPT");
			SystemShell.ShellCmd("ip6tables -P OUTPUT ACCEPT");
			SystemShell.ShellCmd("ip6tables -t nat -F");
			SystemShell.ShellCmd("ip6tables -t mangle -F");
			SystemShell.ShellCmd("ip6tables -F");
			SystemShell.ShellCmd("ip6tables -X");

			// Local V4
			SystemShell.ShellCmd("iptables -A INPUT -i lo -j ACCEPT");
			SystemShell.ShellCmd("iptables -A OUTPUT -o lo -j ACCEPT");

			// Local V6
			SystemShell.ShellCmd("ip6tables -A INPUT -i lo -j ACCEPT");
			SystemShell.ShellCmd("ip6tables -A OUTPUT -o lo -j ACCEPT");

			// Make sure you can communicate with any DHCP server
			SystemShell.ShellCmd("iptables -A OUTPUT -d 255.255.255.255 -j ACCEPT");
			SystemShell.ShellCmd("iptables -A INPUT -s 255.255.255.255 -j ACCEPT");

			if (Engine.Instance.Storage.GetBool("netlock.allow_private"))
			{
				// Make sure that you can communicate within your own private networks
				SystemShell.ShellCmd("iptables -A INPUT -s 192.168.0.0/16 -d 192.168.0.0/16 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 192.168.0.0/16 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A INPUT -s 10.0.0.0/8 -d 10.0.0.0/8 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 10.0.0.0/8 -d 10.0.0.0/8 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A INPUT -s 172.16.0.0/12 -d 172.16.0.0/12 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 172.16.0.0/12 -d 172.16.0.0/12 -j ACCEPT");

				// Multicast
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 224.0.0.0/24 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 224.0.0.0/24 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 224.0.0.0/24 -j ACCEPT");

				// 239.255.255.250  Simple Service Discovery Protocol address
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 239.255.255.250/32 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 239.255.255.250/32 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 239.255.255.250/32 -j ACCEPT");

				// 239.255.255.253  Service Location Protocol version 2 address
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 239.255.255.253/32 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 239.255.255.253/32 -j ACCEPT");
				SystemShell.ShellCmd("iptables -A OUTPUT -s 192.168.0.0/16 -d 239.255.255.253/32 -j ACCEPT");
            }

			if (Engine.Instance.Storage.GetBool("netlock.allow_ping"))
			{
				// Allow incoming pings (can be disabled)
				SystemShell.ShellCmd("iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT");
			}

			// Allow established sessions to receive traffic: 
			SystemShell.ShellCmd("iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT");

			// Allow TUN 
			SystemShell.ShellCmd("iptables -A INPUT -i tun+ -j ACCEPT");
			SystemShell.ShellCmd("iptables -A FORWARD -i tun+ -j ACCEPT");
			SystemShell.ShellCmd("iptables -A OUTPUT -o tun+ -j ACCEPT");

			// Block All V4
			SystemShell.ShellCmd("iptables -A OUTPUT -j DROP");
			SystemShell.ShellCmd("iptables -A INPUT -j DROP");
			SystemShell.ShellCmd("iptables -A FORWARD -j DROP");

			// Block All V6
			SystemShell.ShellCmd("ip6tables -A OUTPUT -j DROP");
			SystemShell.ShellCmd("ip6tables -A INPUT -j DROP");
			SystemShell.ShellCmd("ip6tables -A FORWARD -j DROP");

			OnUpdateIps();
			
		}

		public override void Deactivation()
		{
			base.Deactivation();

			// IPV4
			string rulesBackupSessionV4 = GetBackupPath("4");

			if (Platform.Instance.FileExists(rulesBackupSessionV4))
			{
				// Flush
				SystemShell.ShellCmd("iptables -P INPUT ACCEPT");
				SystemShell.ShellCmd("iptables -P FORWARD ACCEPT");
				SystemShell.ShellCmd("iptables -P OUTPUT ACCEPT");				
				SystemShell.ShellCmd("iptables -t nat -F");
				SystemShell.ShellCmd("iptables -t mangle -F");
				SystemShell.ShellCmd("iptables -F");
				SystemShell.ShellCmd("iptables -X");

				// Restore
				SystemShell.ShellCmd("iptables-restore <\"" + SystemShell.EscapePath(rulesBackupSessionV4) + "\""); 

                Platform.Instance.FileDelete(rulesBackupSessionV4);
			}

			// IPV6
			string rulesBackupSessionV6 = GetBackupPath("6");

			if (Platform.Instance.FileExists(rulesBackupSessionV6))
			{
				// Restore
				SystemShell.ShellCmd("ip6tables -P INPUT ACCEPT");
				SystemShell.ShellCmd("ip6tables -P FORWARD ACCEPT");
				SystemShell.ShellCmd("ip6tables -P OUTPUT ACCEPT");
				SystemShell.ShellCmd("ip6tables -t nat -F");
				SystemShell.ShellCmd("ip6tables -t mangle -F");
				SystemShell.ShellCmd("ip6tables -F");
				SystemShell.ShellCmd("ip6tables -X");

				// Backup
				SystemShell.ShellCmd("ip6tables-restore <\"" + SystemShell.EscapePath(rulesBackupSessionV6) + "\""); 

                Platform.Instance.FileDelete(rulesBackupSessionV6);
			}

			// IPS
			m_currentList.Clear();
		}

		public override void OnUpdateIps()
		{
			base.OnUpdateIps();

			IpAddresses ipsFirewalled = GetAllIps(true);

			// Remove IP not present in the new list
			foreach (IpAddress ip in m_currentList.IPs)
			{
				if(ipsFirewalled.Contains(ip) == false)
				{
					// Delete
					string cmd = "";
					if(ip.IsV4)
						cmd = "iptables -D OUTPUT -d " + ip.ToCIDR() + " -j ACCEPT";
					else if(ip.IsV6)
						cmd = "ip6tables -D OUTPUT -d " + ip.ToCIDR() + " -j ACCEPT";
					SystemShell.ShellCmd(cmd);
				}
			}

			// Add IP
			foreach (IpAddress ip in ipsFirewalled.IPs)
			{
				if (m_currentList.Contains(ip) == false)
				{
					// Add
					string cmd = "";
					if(ip.IsV4)
						cmd = "iptables -I OUTPUT 1 -d " + ip.ToCIDR() + " -j ACCEPT";
					else if(ip.IsV6)
						cmd = "iptables -I OUTPUT 1 -d " + ip.ToCIDR() + " -j ACCEPT";
					SystemShell.ShellCmd(cmd);
				}
			}

			m_currentList = ipsFirewalled;
		}		
	}
}
